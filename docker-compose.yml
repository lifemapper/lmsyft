version: "3.9"
services:
#
#  resolver:
#    build:
#      context: ./.
#      target: flask
#    networks:
#      - solr
#      - nginx
#    environment:
#      - FLASK_APP=flask_app.resolver:app
#    env_file:
#      ./.env.conf
#    restart: unless-stopped
#
#  sp_cache:
#    build:
#      context: ./.
#      target: flask
#    networks:
#      - solr
#      - nginx
#    environment:
#      - FLASK_APP=flask_app.sp_cache:app
#    env_file:
#      ./.env.conf
#    restart: unless-stopped
#    volumes:
#      - "scratch-path:/scratch-path"

  broker:
    build:
      context: ./.
      target: flask
    networks:
      - nginx
    environment:
      - FLASK_APP=flask_app.broker:app
    env_file:
      ./.env.conf
    restart: unless-stopped
    volumes:
      - "scratch-path:/scratch-path"
      - "webpack-output:/volumes/webpack-output"
      - "static-files:/home/specify/frontend/static"

#  solr:
#    image: solr:8.10.1-slim
#    networks:
#      - solr
#    environment:
#      # See https://github.com/docker-solr/docker-solr/issues/273
#      - SOLR_OPTS=-XX:-UseLargePages
#    entrypoint:
#      # See https://github.com/docker-solr/docker-solr/issues/188
#      - bash
#      - "-c"
#      - "precreate-core sp_collections /opt/solr/server/solr/sp_collections/conf; precreate-core spcoco /opt/solr/server/solr/spcoco/conf; precreate-core specimen_records /opt/solr/server/solr/specimen_records/conf; precreate-core occurrences  /opt/solr/server/solr/occurrences/conf; exec solr -f"
#    volumes:
#      - './solr_cores/:/opt/solr/server/solr'
#      - 'solr:/var/solr'

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
#      - resolver
#      - sp_cache
      - broker
      - front-end

    networks:
      - nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "static-files:/volumes/static-files:ro"
      - "webpack-output:/volumes/webpack-output:ro"

      - "./static/:/var/www/:ro"
      - "./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro"
      - "./config/fullchain.pem:/etc/letsencrypt/fullchain.pem:ro"
      - "./config/privkey.pem:/etc/letsencrypt/privkey.pem:ro"


#  back-end:
#    build:
#      context: ./.
#      target: back-end
#    networks:
#      - nginx
#    environment:
#      - FLASK_APP=lmtrex.flask_app.broker.routes:app
#    restart: unless-stopped
#    volumes:
#      - "scratch-path:/scratch-path"
#      - "webpack-output:/volumes/webpack-output"
#      - "static-files:/home/specify/lmtrex/frontend/static"

  front-end:
    build:
      context: ./.
      target: front-end
    volumes:
      - "webpack-output:/home/node/dist"

volumes:
  scratch-path:
#  solr:
  static-files:
  webpack-output:

networks:
#  solr:
  nginx:
